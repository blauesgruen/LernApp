/**
 * Diagnose-Tool f√ºr DirectoryHandle-Probleme
 * Diese Funktion zeigt detaillierte Informationen zum aktuellen Status des DirectoryHandles
 * und hilft bei der Diagnose von Problemen mit dem Dateisystemzugriff.
 */
function diagnosePersistentStorage() {
    console.group('üìÇ Diagnose des persistenten Speichers');
    
    // 1. Pr√ºfen der localStorage-Flags
    console.log('Pr√ºfe localStorage-Flags...');
    const hasDirectoryHandleFlag = localStorage.getItem('hasDirectoryHandle') === 'true';
    const hasStoredDirectoryHandleFlag = localStorage.getItem('hasStoredDirectoryHandle') === 'true';
    console.log(`- hasDirectoryHandle: ${hasDirectoryHandleFlag ? '‚úì Gesetzt' : '‚úó Nicht gesetzt'}`);
    console.log(`- hasStoredDirectoryHandle: ${hasStoredDirectoryHandleFlag ? '‚úì Gesetzt' : '‚úó Nicht gesetzt'}`);
    
    // 2. Pr√ºfen des globalen DirectoryHandles
    console.log('Pr√ºfe globales DirectoryHandle...');
    if (window.directoryHandle) {
        console.log(`- DirectoryHandle: ‚úì Vorhanden (Name: ${window.directoryHandle.name})`);
    } else {
        console.log('- DirectoryHandle: ‚úó Nicht vorhanden');
    }
    
    // 3. Pr√ºfen der verf√ºgbaren Funktionen
    console.log('Pr√ºfe verf√ºgbare Funktionen...');
    console.log(`- restoreDirectoryHandle: ${typeof window.restoreDirectoryHandle === 'function' ? '‚úì Verf√ºgbar' : '‚úó Nicht verf√ºgbar'}`);
    console.log(`- forceRestoreDirectoryHandle: ${typeof window.forceRestoreDirectoryHandle === 'function' ? '‚úì Verf√ºgbar' : '‚úó Nicht verf√ºgbar'}`);
    console.log(`- autoRepairDirectoryHandle: ${typeof window.autoRepairDirectoryHandle === 'function' ? '‚úì Verf√ºgbar' : '‚úó Nicht verf√ºgbar'}`);
    console.log(`- repairDirectoryHandle: ${typeof window.repairDirectoryHandle === 'function' ? '‚úì Verf√ºgbar' : '‚úó Nicht verf√ºgbar'}`);
    
    // 4. Manuelle √úberpr√ºfung der IndexedDB
    console.log('Starte manuelle √úberpr√ºfung der IndexedDB...');
    checkDirectoryHandleInIndexedDB().then(result => {
        console.log('IndexedDB-Pr√ºfung abgeschlossen:');
        console.log(result);
        console.groupEnd();
    }).catch(error => {
        console.error('Fehler bei der IndexedDB-Pr√ºfung:', error);
        console.groupEnd();
    });
    
    console.log('Diagnose wird ausgef√ºhrt...');
    return "Diagnose l√§uft - siehe Konsolenausgabe f√ºr Details";
}

/**
 * Pr√ºft, ob ein DirectoryHandle in der IndexedDB gespeichert ist
 * @returns {Promise<Object>} Ein Objekt mit Informationen zum gespeicherten Handle
 */
async function checkDirectoryHandleInIndexedDB() {
    try {
        const dbName = 'LernAppDirectoryHandles';
        const storeName = 'lernapp-directory-handles';
        const keyName = 'main-directory-handle';
        
        // IndexedDB √∂ffnen
        const db = await new Promise((resolve, reject) => {
            const request = indexedDB.open(dbName, 2);  // Version 2 verwenden
            request.onerror = (event) => reject(new Error(`Fehler beim √ñffnen der Datenbank: ${event.target.error.message}`));
            request.onsuccess = (event) => resolve(event.target.result);
        });
        
        // Pr√ºfen, ob der Object Store existiert
        if (!db.objectStoreNames.contains(storeName)) {
            return {
                status: 'error',
                message: `Object Store '${storeName}' existiert nicht in der Datenbank`,
                recommendation: 'Verwenden Sie openDirectoryPicker, um einen neuen Speicherort auszuw√§hlen'
            };
        }
        
        // DirectoryHandle laden
        const handle = await new Promise((resolve, reject) => {
            const transaction = db.transaction(storeName, 'readonly');
            const store = transaction.objectStore(storeName);
            const request = store.get(keyName);
            
            request.onerror = (event) => reject(new Error(`Fehler beim Laden des Handles: ${event.target.error.message}`));
            request.onsuccess = (event) => resolve(request.result);
        });
        
        // DirectoryHandle analysieren
        if (!handle) {
            return {
                status: 'empty',
                message: 'Kein DirectoryHandle in der IndexedDB gefunden',
                recommendation: 'Verwenden Sie openDirectoryPicker, um einen Speicherort auszuw√§hlen'
            };
        }
        
        try {
            // Versuchen, einen Wert aus dem Handle zu lesen (throws, wenn ung√ºltig)
            const handleName = handle.name || 'Unbenannt';
            
            return {
                status: 'found',
                message: `DirectoryHandle gefunden: ${handleName}`,
                handle: {
                    name: handleName,
                    type: typeof handle,
                    constructor: handle.constructor ? handle.constructor.name : 'Unbekannt'
                },
                recommendation: 'Versuchen Sie window.autoRepairDirectoryHandle() oder window.forceRestoreDirectoryHandle()'
            };
        } catch (validationError) {
            return {
                status: 'invalid',
                message: `DirectoryHandle ist ung√ºltig: ${validationError.message}`,
                recommendation: 'L√∂schen Sie den ung√ºltigen Handle mit clearStoredDirectoryHandle() und w√§hlen Sie einen neuen Speicherort'
            };
        }
    } catch (error) {
        return {
            status: 'error',
            message: `Fehler bei der √úberpr√ºfung: ${error.message}`,
            error: error
        };
    }
}

// In das globale Objekt exportieren
window.diagnosePersistentStorage = diagnosePersistentStorage;
window.checkDirectoryHandleInIndexedDB = checkDirectoryHandleInIndexedDB;

// Hilfetext in der Konsole ausgeben
console.log('%cüìä Diagnose-Tool f√ºr Dateisystem-Probleme geladen', 'color: green; font-weight: bold');
console.log('F√ºhren Sie window.diagnosePersistentStorage() in der Konsole aus, um die Diagnose zu starten');
